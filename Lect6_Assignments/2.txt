1. Xây dựng cây heap (min-heap) ban đầu từ danh sách: [2, 1, 10, 6, 3, 8, 7, 13, 20]

   - Chèn 2:

       2

   - Chèn 1:

       1
      /
     2

   - Chèn 10:

       1
      / \
     2   10

   - Chèn 6:

       1
      / \
     2   10
    /
   6

   - Chèn 3:

       1
      / \
     2   3
    /
   6

     Heapify:

       1
      / \
     2   3
    /
   6

   - Chèn 8:

       1
      / \
     2   3
    / \
   6   8

   - Chèn 7:

       1
      / \
     2   3
    / \ /
   6   8 7

     Heapify:

       1
      / \
     2   3
    / \ /
   6   8 7

   - Chèn 13:

       1
      / \
     2   3
    / \ / \
   6   8 7 13


   - Chèn 20:

       1
      / \
     2   3
    / \ / \
   6   8 7 13
  /
 20

     Heapify:

       1
      / \
     2   3
    / \ / \
   6   8 7 13
  /
 20

     (Min-heap sau khi chèn tất cả các phần tử):

           1
          / \
         2   3
        / \ / \
       6   8 7 10
      /
     13
    /
   20

     (Sửa lại cho đúng thứ tự heap):

           1
          / \
         2   3
        / \ / \
       6   8 7 10
      /
     13
    /
   20

     (Heapify lại từ đầu để đảm bảo đúng):

           1
          / \
         2   3
        / \ / \
       6   8 7 10
      /
     13
    /
   20

     (Heapify - build heap): [2, 1, 10, 6, 3, 8, 7, 13, 20] -> [1, 2, 10, 6, 3, 8, 7, 13, 20] -> [1, 2, 7, 6, 3, 8, 10, 13, 20] -> [1, 2, 3, 6, 7, 8, 10, 13, 20]

           1
          / \
         2   3
        / \ / \
       6   7 8 10
      / \
     13 20

2. Chèn các giá trị 14, 0, 35 vào cây heap hiện tại:

   - Chèn 14:

           1
          / \
         2   3
        / \ / \
       6   7 8 10
      / \ /
     13 20 14

     Heapify:

           1
          / \
         2   3
        / \ / \
       6   7 8 10
      / \ /
     13 20 14

   - Chèn 0:

           1
          / \
         2   3
        / \ / \
       6   7 8 10
      / \ / \
     13 20 14 0

     Heapify:

           0
          / \
         1   3
        / \ / \
       2   7 8 10
      / \ / \
     13 20 14 6

   - Chèn 35:

           0
          / \
         1   3
        / \ / \
       2   7 8 10
      / \ / \ /
     13 20 14 6 35

     Heapify: Không cần thiết.

3. Xóa các giá trị 6, 13, 35 khỏi cây heap hiện tại (thao tác xóa trong heap thường là xóa phần tử nhỏ nhất):

   - Xóa (giả sử muốn xóa giá trị 6 - không phải thao tác chuẩn của heap): Tìm kiếm và xóa 6, sau đó heapify lại (phức tạp). Thay vào đó, mô phỏng việc xóa min nhiều lần.

   - Lần 1 (mô phỏng xóa giá trị gần 6 nhất nếu nó là min): Thực hiện extract-min (xóa 0):

           35
          / \
         1   3
        / \ / \
       2   7 8 10
      / \ / \
     13 20 14 6

     Heapify:

           1
          / \
         2   3
        / \ / \
       6   7 8 10
      / \ / \
     13 20 14 35

   - Lần 2 (mô phỏng xóa giá trị gần 13 nhất): Thực hiện extract-min (xóa 1):

           35
          / \
         2   3
        / \ / \
       6   7 8 10
      / \ / \
     13 20 14

     Heapify:

           2
          / \
         6   3
        / \ / \
       13  7 8 10
      / \
     20 14

   - Lần 3 (mô phỏng xóa giá trị gần 35 nhất): Thực hiện extract-min (xóa 2):

           14
          / \
         6   3
        / \ / \
       13  7 8 10
      / \
     20 35

     Heapify:

           3
          / \
         6  14
        / \ / \
       13  7 8 10
      / \
     20 35
